#include "Global.h"
int PK = 0;
map <wstring, int> labels;
map <wstring, wstring> variabels;
vector <StackEl> stackOp;

COMPILER GRAPHPZDC

CHARACTERS
  letter = 'A'..'Z' + 'a'..'z'.
  digit = "0123456789".
  verbatimStringChar = ANY - '"'.
  cr  = '\r'.  lf  = '\n'.  tab = '\t'.

TOKENS
  Ident  = letter {letter | digit}.
  Number = digit {digit} ['.' digit {digit}].
  string = "\"" {verbatimStringChar} "\"".

COMMENTS FROM "//" TO lf
COMMENTS FROM "/*" TO "*/" NESTED

IGNORE cr + lf + tab

PRODUCTIONS

  GRAPHPZDC = {StatL}.
  Op<Operations &op> = 
        '+'(.op= PLS;.) |
        '-'(.op=MNS;.)|
        '*'(.op=MUL;.)|
        '/'(.op=DIV;.).
  RelOp<Operations &op> =  
            "=="(.op=EQU;.)|
            '<'(.op=LSS;.)|
            '>'(.op=GTR;.)|
            "!="(.op=NEQ;.).

  LogicOp<Operations &op> = "||"(.op=OR;.)|
            "&"(.op=AND;.).
            
  StatL = [Number (.labels[t->val]=PK;.) ':'] Operator.

  D_var<wchar_t* &name> 
   = "d_" Ident             (. wstring pref = L"d_";
                              wstring tmp = coco_string_create(t->val);
                              pref += tmp;
                              name = coco_string_create (pref.c_str());
                            .).

  S_var<wchar_t* &name> 
   = "s_" Ident             (. wstring pref = L"s_";
                              wstring tmp = coco_string_create(t->val);
                              pref += tmp;
                              name = coco_string_create (pref.c_str());
                            .).
  P_var<wchar_t* &name> 
   = "p_" Ident             (. wstring pref = L"p_";
                              wstring tmp = coco_string_create(t->val);
                              pref += tmp;
                              name = coco_string_create (pref.c_str());
                            .).
  E_var<wchar_t* &name>
   = "e_" Ident             (. wstring pref = L"e_";
                              wstring tmp = coco_string_create(t->val);
                              pref += tmp;
                              name = coco_string_create (pref.c_str());
                            .).

  P_varId<bool set> (. wchar_t *pname; .) = "pid(" P_var<pname> ')' (.
    (set)? stackOp.push_back({SET_PID,  wstring(pname)}),PK++ :
      stackOp.push_back({GET_PID,  wstring(pname)}),PK++;
  .).
  E_varP<bool set> (. wchar_t *ename; .) = "ep" ('F'|'S') '(' E_var<ename> ')'(.
    (set)? stackOp.push_back({SET_EP, L""}),PK++ : stackOp.push_back({GET_EP, L""}),PK++;
    stackOp.push_back({NL, wstring(ename)});
  .).
  E_varW<bool set> (. wchar_t *ename; .) = "ew(" E_var<ename> ')'(.
    (set)? stackOp.push_back({SET_EW, L""}),PK++ : stackOp.push_back({GET_EW, L""}),PK++;
    stackOp.push_back({NL, wstring(ename)});
  .).
  E_varD<bool set> (. wchar_t *ename; .) = "ed(" E_var<ename> ')'(.
    (set)? stackOp.push_back({SET_ED, L""}),PK++ : stackOp.push_back({GET_ED, L""}),PK++;
    stackOp.push_back({NL, wstring(ename)});
  .).

  Point (. wchar_t *pname; .) = 
    (
      ( '(' Any_Num ')' ) |
      (P_var<pname>) |
      (E_varP<false>)
    ).

  Edge (. wchar_t *ename; .) = 
    (
      (E_var<ename>|
      ( '(' Point ',' Point ',' Boolean ',' Any_Num ')' ) )
    )
    {'+' Edge }.

  Any_Num (. wchar_t *name; Operations op; .) = 
    ( 
      (Number (. stackOp.push_back({CONST, wstring(t->val)}); PK++; .))|
      P_varId<false>|
      E_varW<false>|
      (D_var<name> (. stackOp.push_back({LOAD, wstring(name)}); PK++; .))
    ) 
    { Op<op> Any_Num (. stackOp.push_back({op, L""}); PK++; .)}.

  Any_Var (. wchar_t *name; .) = D_var<name> 
                                |S_var<name> 
                                |P_var<name> 
                                |E_var<name>.

  Any_String (. wchar_t *sname; .) = (string | S_var<sname>) {'.' Any_String }.


  Assign (. wchar_t *name; .) = (
      (D_var<name>'=' Any_Num ';' (.stackOp.push_back({ASG, wstring(name)}),PK++;.)) |
      (S_var<name> '=' Any_String ';' (.stackOp.push_back({ASG, wstring(name)}),PK++;.)) |
      (P_var<name>'=' Point ';' (.stackOp.push_back({ASG, wstring(name)}),PK++;.)) |
      (P_varId<true> '=' Any_Num ';' (.stackOp.push_back({ASG, L""}),PK++;.)) |
      (E_var<name> '=' Edge ';' (.stackOp.push_back({ASG, wstring(name)}),PK++;.)) |
      (E_varP<true> '=' Point ';' (.stackOp.push_back({ASG, L""}),PK++;.)) | 
      (E_varW<true> '=' Any_Num ';' (.stackOp.push_back({ASG, L""}),PK++;.)) | 
      (E_varD<true> '=' Boolean ';' (.stackOp.push_back({ASG, L""}),PK++;.))
    ).

  Compare (.Operations op; .) = (
      (Any_Num RelOp<op> Any_Num (. stackOp.push_back({op,L""}); PK++; .)) |
      (Point RelOp<op> Point (. stackOp.push_back({op,L""}); PK++; .)) |
      (Edge RelOp<op> Edge (. stackOp.push_back({op,L""}); PK++; .)) |
      (Any_String RelOp<op> Any_String (. stackOp.push_back({op,L""}); PK++; .))
    ).

  Boolean_expression(.Operations op; .) = (Compare {LogicOp<op> Compare (. stackOp.push_back({op,L""}); PK++; .)}).

  Boolean =
      ("True"
      |"False"
      |Boolean_expression).

  Delete = "delete" Any_Var ';'.

  Goto = "goto" Number ';'.
  
  While = "while("Boolean")" Operator.
  
  If = "if(" Boolean ")" Operator 
    ["else" Operator].
  
  Bl_Operator = '{' {Operator} '}'.
  
  Writeln = "writeln<<" (Any_Num|Any_Var|Any_String) ";".
  
  Readln = "readln>>" Any_Var ";".

  Operator = Bl_Operator|If|While|Assign|Goto|Delete|Writeln|Readln.

END GRAPHPZDC.